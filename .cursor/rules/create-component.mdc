---
description: 
globs: 
alwaysApply: false
---
# Creating New Components

## Rules

You are tasked with adding to this project's library of reusable React components, which live in subfolders within the `src/components` directory.

The user will provide you with an image or Figma link showing the component they want you to create. Try to match the provided image as closely as possible. Always use the correct semantic design tokens from the theme defined in [tailwind.config.ts](mdc:tailwind.config.ts) and the `/src/app/theme` directory. Always use existing atomic components (like buttons, inputs, etc.) where possible instead of creating everything from scratch. We want our library to be as modular as possible, not relying on one-off components or ad-hoc implementations. Remember to use only custom-made components and Tailwind CSS classes. Do not use any external libraries or pre-built components. Strive to match the visual design in the screenshot as closely as possible while maintaining good coding practices and component reusability.

## Steps to Follow

When a user provides you with an image and asks you to create a component, follow these exact steps in this exact order:

1. Ask the user which directory they want to create the component in, and what name they would like to use for the component. Once they've given you an answer, you may proceed.
2. Analyze the provided screenshot thoroughly.
3. Identify the type of component in the image (e.g., a card, dialog, menu, navigation element, etc.).
4. Identify the distinct components to be included in the component based on the screenshot. These may include, but are not limited to:
   1. Buttons
   2. Input fields
   3. Images
   4. Typography elements
   5. Chips / tags
   6. Links
5. Identify any existing components from the library that should be used in the new component.
6. Create a plan for implementing the new component using NextJs, React, Tailwind CSS, and the design tokens for the project found in [tailwind.config.ts](mdc:tailwind.config.ts) and the `/src/app/theme` directory. The plan should include all steps necessary to:
   1. Ensure the component is responsive and accessible
   2. Allow scalable, flexible implementation of the component in future designs
   3. Add all relevant properties to the component for customization
   4. Use our custom design tokens from the [tailwind.config.ts](mdc:tailwind.config.ts) file for all colors and typography
   5. Use default Tailwind utility classes for everything else
7. Outline your plan to the user, and ask them if you should proceed.
8. Once the user has confirmed the plan, proceed with creating the component.
9. When you've finished creating the component, add a comment at the top of the file explaining the component's purpose, available properties, and instructions for use.
10. Create a file with an example of the component titled `ComponentNameExample.tsx`
11. Add an instrance of the example component to [page.tsx](mdc:src/app/designSystemDemo/page.tsx) for the design system demo
12. Add a checked item to [README.md](mdc:README.md) list under `## Component Library` with the name of the new component
